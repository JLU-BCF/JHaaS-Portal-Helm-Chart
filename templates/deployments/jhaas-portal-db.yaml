{{ if .Values.postgres.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    {{ .Release.Name }}.service: {{ .Release.Name }}-db
  name: {{ .Release.Name }}-db
spec:
  replicas: 1
  selector:
    matchLabels:
      {{ .Release.Name }}.service: {{ .Release.Name }}-db
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        {{ .Release.Name }}.service: {{ .Release.Name }}-db
    spec:
      containers:
        - env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_HOST
                  name: env-{{ .Release.Name }}-db
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: env-{{ .Release.Name }}-db
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_DB
                  name: sec-{{ .Release.Name }}-db
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: sec-{{ .Release.Name }}-db
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_USER
                  name: sec-{{ .Release.Name }}-db
          image: {{ .Values.postgres.image.name }}
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          name: {{ .Release.Name }}-db
          ports:
            - containerPort: {{ .Values.postgres.conf.POSTGRES_PORT }}
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: vol-{{ .Release.Name }}-db
      hostname: {{ .Release.Name }}-db
      restartPolicy: Always
      volumes:
        - name: vol-{{ .Release.Name }}-db
          persistentVolumeClaim:
            claimName: vol-{{ .Release.Name }}-db
status: {}
{{- end }}
